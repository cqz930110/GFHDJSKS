//
//  PSChatGroupDetailViewController.m
//  WeiPublicFund
//
//  Created by zhoupushan on 15/12/17.
//  Copyright © 2015年 www.niuduz.com. All rights reserved.
//

#import "PSChatGroupDetailViewController.h"
#import "NewFriendDetailProjectCell.h"
#import "ComplaintViewController.h"
#import "EMGroup.h"
#import "PSActionSheet.h"
#import "GroupNoticeViewController.h"
#import "User.h"
#import "ChangeGroupNameViewController.h"
#import "GroupFriendListViewController.h"
#import "ChatBuddyDAO.h"
#import "SendCMDMessageUtil.h"
#import "PSChat.h"

@interface PSChatGroupDetailViewController ()<IChatManagerDelegate,UIActionSheetDelegate,UINavigationControllerDelegate,UIImagePickerControllerDelegate,ChangeGroupNameViewControllerDelegate,GroupNoticeViewControllerDelegate>
@property (weak, nonatomic) IBOutlet UIImageView *headImageView;
@property (weak, nonatomic) IBOutlet UILabel *nameLabel;
@property (weak, nonatomic) IBOutlet UILabel *groupNameLabel2;
@property (weak, nonatomic) IBOutlet UILabel *groupNumberLabel;
@property (weak, nonatomic) IBOutlet UILabel *notFriendLabel;
@property (weak, nonatomic) IBOutlet UICollectionView *friendsCollectionView;
@property (weak, nonatomic) IBOutlet UIButton *loadImageButton;
@property (weak, nonatomic) IBOutlet UIButton *greenButton;
@property (weak, nonatomic) IBOutlet UIButton *redButton;

@property (weak, nonatomic) IBOutlet UILabel *groupNoticeLabel;
@property (strong, nonatomic) NSMutableArray *images;
@property (strong, nonatomic) EMGroup *chatGroup;
@property (nonatomic) PSGroupOccupantType occupantType;
@property (copy, nonatomic) NSString *levelGroup;

@property (assign, nonatomic,setter=isProjectChat:) BOOL proejectChat;
@end

@implementation PSChatGroupDetailViewController
- (void)registerNotifications {
    [self unregisterNotifications];
    [[EaseMob sharedInstance].chatManager addDelegate:self delegateQueue:nil];
}

- (void)unregisterNotifications
{
    [[EaseMob sharedInstance].chatManager removeDelegate:self];
}

- (void)dealloc
{
    [self unregisterNotifications];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"GroupBansChanged" object:nil];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.title = @"群详情";
    _headImageView.layer.cornerRadius = _headImageView.width * 0.5;
    _headImageView.layer.masksToBounds = YES;
    [self backBarItem];
    [self setupCollectionView];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(groupBansChanged) name:@"GroupBansChanged" object:nil];
}

- (void)groupBansChanged
{
    NSLog(@"群成员发生了变化了");
    [self requestGroupDetailWithGroupId:_groupId];
}

#pragma mark - GroupNoticeViewControllerDelegate
- (void)changeGroupNotice:(NSString *)groupNotice
{
    _groupNoticeLabel.text = groupNotice;
}

#pragma mark - ChangeGroupNameViewControllerDelegate
- (void)changeGroupName:(NSString *)groupName
{
    _nameLabel.text = groupName;
    _groupNameLabel2.text = groupName;
    [SendCMDMessageUtil sendGroupNameCMDEessage:groupName groupId:_groupId];
    PSChat *chat = [ChatBuddyDAO chatBuddyWithUserame:_groupId];
    chat.showName = groupName;
    [ChatBuddyDAO updateChatBuddy:chat];
}

#pragma mark - data
- (void)fetchGroupInfo
{
    __weak typeof(self) weakSelf = self;
    [MBProgressHUD showStatus:nil toView:self.view];
    [[EaseMob sharedInstance].chatManager asyncFetchGroupInfo:_chatGroup.groupId completion:^(EMGroup *group, EMError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [weakSelf hideHud];
            if (!error) {
                weakSelf.chatGroup = group;
                EMConversation *conversation = [[EaseMob sharedInstance].chatManager conversationForChatter:group.groupId conversationType:eConversationTypeGroupChat];
                if ([group.groupId isEqualToString:conversation.chatter]) {
                    NSMutableDictionary *ext = [NSMutableDictionary dictionaryWithDictionary:conversation.ext];
                    [ext setObject:group.groupSubject forKey:@"groupSubject"];
                    [ext setObject:[NSNumber numberWithBool:group.isPublic] forKey:@"isPublic"];
                    conversation.ext = ext;
                }
                [weakSelf reloadDataSource];
                [MBProgressHUD dismissHUDForView:self.view];
            }
            else
            {
                [MBProgressHUD dismissHUDForView:self.view withError:@"请求失败"];
            }
        });
    } onQueue:nil];
}

- (void)reloadDataSource
{
    self.occupantType = PSGroupOccupantTypeMember;
    NSDictionary *loginInfo = [[[EaseMob sharedInstance] chatManager] loginInfo];
    NSString *loginUsername = [loginInfo objectForKey:kSDKUsername];
    if ([self.chatGroup.owner isEqualToString:loginUsername]) {
        self.occupantType = PSGroupOccupantTypeOwner;
    }
    
    if (self.occupantType != PSGroupOccupantTypeOwner) {
        for (NSString *str in self.chatGroup.members) {
            if ([str isEqualToString:loginUsername]) {
                self.occupantType = PSGroupOccupantTypeMember;
                break;
            }
        }
    }
    
    dispatch_async(dispatch_get_main_queue(), ^{
        if (_occupantType == PSGroupOccupantTypeMember)
        {
            // 成员
            _loadImageButton.selected = NO;
            // button 的 action不同
            [_redButton setTitle:@"退出群组" forState:UIControlStateNormal];
        }
        else
        {
            _loadImageButton.selected = YES;
            [_redButton setTitle:@"解散群组" forState:UIControlStateNormal];
            // owner
        }
    });
}

- (void)setOccupantType:(PSGroupOccupantType)occupantType
{
    _occupantType = occupantType;
    
    // 项目详情都需要隐藏！
    if (_occupantType == PSGroupOccupantTypeOwner && _proejectChat)
    {
        _redButton.hidden = YES;
        _greenButton.hidden = YES;
        return;
    }
    
    if (_occupantType == PSGroupOccupantTypeMember)
    {
        // 成员
        _loadImageButton.selected = NO;
        [_redButton setTitle:@"退出群组" forState:UIControlStateNormal];
    }
    else
    {
        _loadImageButton.selected = YES;
        [_redButton setTitle:@"解散群组" forState:UIControlStateNormal];
    }
}

- (void)setupCollectionView
{
    [self.friendsCollectionView registerNib:[UINib nibWithNibName:@"NewFriendDetailProjectCell" bundle:nil] forCellWithReuseIdentifier:@"NewFriendDetailProjectCell"];
}

- (void)setGroupId:(NSString *)groupId
{
    _groupId = groupId;
    [self requestGroupDetailWithGroupId:_groupId];
}

#pragma mark - Request
- (void)requestGroupDetailWithGroupId:(NSString *)groupId
{
    [MBProgressHUD showStatus:nil toView:self.view];
    [self.httpUtil requestDic4MethodName:@"Group/Details" parameters:@{@"GroupId":groupId} result:^(NSDictionary *dic, int status, NSString *msg)
     {
         if (status == 1)
         {
             [MBProgressHUD dismissHUDForView:self.view];
             NSDictionary *groupDic = [dic valueForKey:@"group"];
             _proejectChat = [[groupDic valueForKey:@"CrowdFundId"] integerValue];
             _nameLabel.text = [groupDic valueForKey:@"GroupName"];
             _groupNameLabel2.text = [groupDic valueForKey:@"GroupName"];
             _groupNoticeLabel.text = [groupDic valueForKey:@"Notice"];
             NSString *imageUrl = [groupDic valueForKey:@"Avatar"];
             if (imageUrl)
             {
                 [NetWorkingUtil setImage:_headImageView url:imageUrl defaultIconName:@"home_默认"];
             }

             NSArray *users = [dic valueForKey:@"groupUsers"];
             _groupNumberLabel.text = [NSString stringWithFormat:@"%@",[groupDic valueForKey:@"UserCount"]]; 
             _images = [NSMutableArray arrayWithCapacity:5];
             for (NSDictionary *usetDic in users)
             {
                 NSString *imagesStr = [usetDic valueForKey:@"Avatar"];

                [_images addObject:imagesStr];
                 
             }
             
            _notFriendLabel.hidden = _images.count;
             
             NSString *userId = [NSString stringWithFormat:@"%@",[groupDic valueForKey:@"UserId"]];
             User *user = [User shareUser];
             if ([user.Id longValue] == [userId integerValue])
             {
                 self.occupantType = PSGroupOccupantTypeOwner;
             }
             else
             {
                 self.occupantType = PSGroupOccupantTypeMember;
             }
             [_friendsCollectionView reloadData];
             
             PSChat *chat = [[PSChat alloc] init];
             chat.avatar = [groupDic valueForKey:@"Avatar"];
             chat.name = [groupDic valueForKey:@"GroupName"];
             chat.value = groupId;
             [ChatBuddyDAO updateChatBuddy:chat];
         }
         else
         {
             [MBProgressHUD dismissHUDForView:self.view withError:msg];
         }
     }];
}

#pragma mark - actionsheet代理
-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    UIImagePickerController *imagePicerController;
    if (buttonIndex == 1)
    {
        if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])
        {
            imagePicerController = [[UIImagePickerController alloc]init];
            imagePicerController.navigationBar.barTintColor = [UIColor colorWithHexString:@"#f35c56"];
            imagePicerController.delegate = self;
            imagePicerController.allowsEditing = YES;
            imagePicerController.sourceType = UIImagePickerControllerSourceTypeCamera;
            imagePicerController.showsCameraControls = YES;//takePicture
            [self presentViewController:imagePicerController animated:YES completion:nil];
        }
        else
        {
            ULog(@"设备不支持");
        }
        
    }
    else if (buttonIndex == 0)
    {
        // 相册
        imagePicerController = [[UIImagePickerController alloc]init];
        imagePicerController.navigationBar.tintColor = [UIColor blackColor];
        imagePicerController.navigationBar.barTintColor = NaviColor;
        imagePicerController.delegate = self;
        imagePicerController.allowsEditing = YES;
        imagePicerController.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
        [self presentViewController:imagePicerController animated:YES completion:nil];
    }
}

#pragma mark - 选取图片后的回调
-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    UIImage *image = [info objectForKey:UIImagePickerControllerEditedImage];
    [MBProgressHUD showStatus:nil toView:self.view];
    [self.httpUtil requestImageMethodName:@"Group/UploadAvatar" parameters:@{@"GroupId":_groupId} images:@[image] result:^(NSString *avatar, int status, NSString *msg) {
        if (status == 1 || status == 2)
        {
            NSLog(@"%@",avatar);
            [MBProgressHUD dismissHUDForView:self.view withSuccess:@"美图上传成功啦,阿么好开心呀"];
            _headImageView.image = image;
            [SendCMDMessageUtil sendGroupAvatarCMDEessage:avatar groupId:_groupId];
            PSChat *chat = [ChatBuddyDAO chatBuddyWithUserame:_groupId];
            chat.avatar = avatar;
            [ChatBuddyDAO updateChatBuddy:chat];
        }
        else
        {
            [MBProgressHUD dismissHUDForView:self.view withError:msg];
        }
    }];
    [picker dismissViewControllerAnimated:YES completion:nil];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [picker dismissViewControllerAnimated:YES completion:nil];
}

//修改照片尺寸
-(UIImage *)changeImageviewSize:(UIImageView *)Imageview{
    UIGraphicsBeginImageContext(Imageview.bounds.size);
    [Imageview.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}

#pragma mark - Action
- (IBAction)loadGroupImage:(UIButton *)sender
{
    //这里需要判断是否是群主
    if (self.occupantType == PSGroupOccupantTypeOwner)
    {
        UIActionSheet *sheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:nil otherButtonTitles:@"从相册中选择",@"拍一张", nil];
        [sheet showInView:self.view];
    }
}

- (IBAction)groupNoticeAction:(UIButton *)sender
{
    GroupNoticeViewController *vc = [[GroupNoticeViewController alloc]init];    
    vc.canEdit = !(_occupantType == PSGroupOccupantTypeMember);;
    vc.groupId = _groupId;
    vc.delegate = self;
    [self.navigationController pushViewController:vc animated:NO];
}

- (IBAction)groupName:(UIButton *)sender
{
    //这里需要判断是否是群主
    if (self.occupantType == PSGroupOccupantTypeOwner)
    {
        ChangeGroupNameViewController *vc = [[ChangeGroupNameViewController alloc]init];
        vc.groupName =  _nameLabel.text;
        vc.groupId = _groupId;
        vc.delegate = self;
        [self.navigationController pushViewController:vc animated:YES];
    }
}

- (IBAction)groupFriendList:(UIButton *)sender
{
    // 好友列表
    GroupFriendListViewController *vc = [[GroupFriendListViewController alloc]init];
    vc.groupId = _groupId;
    [self.navigationController pushViewController:vc animated:YES];
}

- (IBAction)greenAction:(UIButton *)sender
{
    // 举报
    ComplaintViewController *vc = [[ComplaintViewController alloc]init];
    vc.complaintType = @"0";
    vc.username = [NSString stringWithFormat:@"%@",_groupId];
    [self.navigationController pushViewController:vc animated:YES];
}

- (IBAction)redAction:(UIButton *)sender
{
    // 退出
    if (self.occupantType == PSGroupOccupantTypeOwner)
    {
        [self dissolveAction];
    }
    else
    {
        [self exitAction];
    }
    
    [MBProgressHUD showStatus:nil toView:self.view];
    [self.httpUtil requestDic4MethodName:@"Group/Exit" parameters:@{@"GroupId":_groupId} result:^(NSDictionary *dic, int status, NSString *msg) {
        if (status == 1 || status == 2)
        {
            [MBProgressHUD dismissHUDForView:self.view withSuccess:@"操作成功"];
            [[EaseMob sharedInstance].chatManager removeConversationByChatter:_groupId deleteMessages:YES append2Chat:YES];
            
            [self performSelector:@selector(popToViewController) withObject:nil afterDelay:1.5];
        }
        else
        {
            [MBProgressHUD dismissHUDForView:self.view withError:msg];
        }
    }];
}

- (void)popToViewController
{
    NSArray *childViewControllers  = self.navigationController.childViewControllers;
    NSUInteger destinationIndex = (childViewControllers.count - 3);
    [self.navigationController popToViewController:childViewControllers[destinationIndex] animated:YES];
}

#pragma mark - EaseMOb
//退出群组
- (void)exitAction
{
    [[EaseMob sharedInstance].chatManager asyncLeaveGroup:_chatGroup.groupId completion:^(EMGroup *group, EMGroupLeaveReason reason, EMError *error) {
    } onQueue:nil];
}

//解散群组
- (void)dissolveAction
{
    [[EaseMob sharedInstance].chatManager asyncDestroyGroup:_groupId completion:^(EMGroup *group, EMGroupLeaveReason reason, EMError *error)
    {
    } onQueue:nil];
}

//设置群组
- (void)configureAction {
    // todo
    [[[EaseMob sharedInstance] chatManager] asyncIgnoreGroupPushNotification:_chatGroup.groupId
                                                                    isIgnore:_chatGroup.isPushNotificationEnabled];
    
    return;
}

#pragma mark - UICollectionViewDelegate & UICollectionViewDataSource
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    NSInteger number = 0;
    if (_images.count)
    {
        number = _images.count > 5?5:_images.count;
    }
    
    return number;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NewFriendDetailProjectCell *cell = [_friendsCollectionView dequeueReusableCellWithReuseIdentifier:@"NewFriendDetailProjectCell" forIndexPath:indexPath];
    [cell setimageUrl:_images[indexPath.row]];
    return cell;
}
@end
